name: Build iOS Tweak

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Use the latest GitHub Actions v3

      - name: Set up dependencies
        run: |
          # Install Theos (This requires a macOS runner)
          git clone --recursive https://github.com/theos/theos.git
          export THEOS=$(pwd)/theos
          export PATH=$THEOS/bin:$PATH
          echo "Theos installation complete."

      - name: Set up environment variables
        run: |
          export TARGET=iphone:clang:latest:7.0  # Adjust this if targeting a different iOS version
          export THEOS=$PWD/theos
          export PATH=$THEOS/bin:$PATH
          echo "Environment setup complete."

      - name: Find directories with Makefile and .m files, and build
        run: |
          # Initialize an empty file to collect the paths of built .dylibs
          echo "Searching for Makefile and .m files..." > dylib_files.txt
          
          # Find all directories containing a Makefile and .m files
          for dir in $(find . -type f -name "Makefile" -exec dirname {} \;); do
            # Check if this directory contains .m files
            if [ -n "$(find $dir -name "*.m")" ]; then
              echo "Building in directory: $dir"
              cd "$dir"

              # Clean and build the package
              make clean || echo "make clean failed in $dir"
              make package || echo "make package failed in $dir"

              # Check if the dylib was generated in the current directory
              dylib_file=$(find .theos/obj -type f -name "*.dylib")
              if [ -n "$dylib_file" ]; then
                echo "Found .dylib: $dylib_file"
                # Save the dylib file path for uploading later
                echo "$dylib_file" >> $GITHUB_ENV
              else
                echo "No .dylib found in $dir"
              fi
            else
              echo "No .m files found in $dir, skipping build."
            fi
          done

      - name: Upload all .dylib files
        uses: actions/upload-artifact@v4  # Use v4 of the upload-artifact action
        with:
          name: MyBlockButton-dylibs
          path: ${{ env.dylib_file }}
